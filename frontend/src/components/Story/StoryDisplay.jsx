import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, BookOpen, Clock, Heart, Share2, 
  Download, Play, Pause, RotateCcw, 
  Type, Volume2, VolumeX 
} from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import toast from 'react-hot-toast';
import './StoryDisplay.css';

const StoryDisplay = ({ story, onClose }) => {
  const [isReading, setIsReading] = useState(false);
  const [readingProgress, setReadingProgress] = useState(0);
  const [fontSize, setFontSize] = useState(16);
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [audioEnabled, setAudioEnabled] = useState(false);
  const [readingSpeed, setReadingSpeed] = useState(200); // words per minute

  const {
    title,
    content,
    style,
    theme,
    reading_time,
    created_at,
    word_count
  } = story;

  // Auto-reading functionality
  useEffect(() => {
    let interval;
    if (isReading) {
      const words = content.split(' ');
      const totalWords = words.length;
      const wordsPerSecond = readingSpeed / 60;
      const intervalTime = 1000 / wordsPerSecond;

      interval = setInterval(() => {
        setReadingProgress(prev => {
          const next = prev + (100 / totalWords);
          if (next >= 100) {
            setIsReading(false);
            return 100;
          }
          return next;
        });
      }, intervalTime);
    }

    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isReading, readingSpeed, content]);

  // Text-to-speech (if supported)
  useEffect(() => {
    if (audioEnabled && 'speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(content);
      utterance.rate = 0.8;
      utterance.pitch = 1;
      utterance.volume = 0.8;

      if (isReading) {
        speechSynthesis.speak(utterance);
      } else {
        speechSynthesis.cancel();
      }

      return () => {
        speechSynthesis.cancel();
      };
    }
  }, [isReading, audioEnabled, content]);

  const handleToggleReading = () => {
    setIsReading(!isReading);
  };

  const handleResetReading = () => {
    setIsReading(false);
    setReadingProgress(0);
  };

  const handleShare = async () => {
    try {
      const shareData = {
        title: `Story: ${title}`,
        text: `I discovered this meaningful story: "${title}" - A ${style.replace('_', ' ')} about ${theme.replace('_', ' ')}.`,
        url: window.location.href
      };

      if (navigator.share && navigator.canShare(shareData)) {
        await navigator.share(shareData);
        toast.success('Story shared');
      } else {
        await navigator.clipboard.writeText(shareData.text);
        toast.success('Story copied to clipboard');
      }
    } catch (error) {
      toast.error('Unable to share story');
    }
  };

  const handleDownload = () => {
    try {
      const storyText = `${title}\n\n${content}\n\n---\nGenerated by HavenMind\nStyle: ${style.replace('_', ' ')}\nTheme: ${theme.replace('_', ' ')}\nReading time: ${reading_time} minutes`;
      
      const blob = new Blob([storyText], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.txt`;
      link.click();
      URL.revokeObjectURL(url);
      toast.success('Story downloaded');
    } catch (error) {
      toast.error('Unable to download story');
    }
  };

  const toggleFullscreen = () => {
    setIsFullscreen(!isFullscreen);
  };

  const getStyleColor = () => {
    const colors = {
      allegory: '#8b5cf6',
      fairy_tale: '#ec4899',
      meditation: '#10b981',
      adventure: '#f59e0b',
      wisdom: '#3b82f6'
    };
    return colors[style] || '#6366f1';
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  return (
    <AnimatePresence>
      <motion.div 
        className={`story-display ${isFullscreen ? 'fullscreen' : ''}`}
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        exit={{ opacity: 0, scale: 0.95 }}
        transition={{ duration: 0.3 }}
      >
        {/* Header */}
        <div className="story-header">
          <div className="story-meta">
            <div className="story-badge" style={{ backgroundColor: getStyleColor() }}>
              {style.replace('_', ' ')}
            </div>
            <div className="story-details">
              <h1 className="story-title">{title}</h1>
              <div className="story-info">
                <span className="reading-time">
                  <Clock size={14} />
                  {reading_time} min read
                </span>
                <span className="word-count">{word_count || content.split(' ').length} words</span>
                <span className="created-date">{formatDate(created_at)}</span>
              </div>
            </div>
          </div>

          <div className="story-actions">
            <button 
              className="action-btn"
              onClick={handleToggleReading}
              title={isReading ? 'Pause reading' : 'Start guided reading'}
            >
              {isReading ? <Pause size={16} /> : <Play size={16} />}
            </button>
            
            <button 
              className="action-btn"
              onClick={handleResetReading}
              title="Reset reading progress"
              disabled={readingProgress === 0}
            >
              <RotateCcw size={16} />
            </button>

            <button 
              className="action-btn"
              onClick={() => setAudioEnabled(!audioEnabled)}
              title={audioEnabled ? 'Disable audio' : 'Enable audio reading'}
            >
              {audioEnabled ? <Volume2 size={16} /> : <VolumeX size={16} />}
            </button>

            <button 
              className="action-btn"
              onClick={handleShare}
              title="Share story"
            >
              <Share2 size={16} />
            </button>

            <button 
              className="action-btn"
              onClick={handleDownload}
              title="Download story"
            >
              <Download size={16} />
            </button>

            <button 
              className="action-btn"
              onClick={toggleFullscreen}
              title="Toggle fullscreen"
            >
              <BookOpen size={16} />
            </button>

            <button 
              className="close-btn"
              onClick={onClose}
              title="Close story"
            >
              <X size={16} />
            </button>
          </div>
        </div>

        {/* Reading Progress */}
        {readingProgress > 0 && (
          <div className="reading-progress">
            <div 
              className="progress-bar"
              style={{ 
                width: `${readingProgress}%`,
                backgroundColor: getStyleColor()
              }}
            />
          </div>
        )}

        {/* Story Content */}
        <div className="story-content">
          <div className="reading-controls">
            <div className="font-controls">
              <button 
                className="font-btn"
                onClick={() => setFontSize(Math.max(12, fontSize - 2))}
                title="Decrease font size"
              >
                A-
              </button>
              <span className="font-size-display">{fontSize}px</span>
              <button 
                className="font-btn"
                onClick={() => setFontSize(Math.min(24, fontSize + 2))}
                title="Increase font size"
              >
                A+
              </button>
            </div>

            {audioEnabled && (
              <div className="speed-controls">
                <label>Reading Speed:</label>
                <select 
                  value={readingSpeed}
                  onChange={(e) => setReadingSpeed(Number(e.target.value))}
                >
                  <option value={120}>Slow (120 WPM)</option>
                  <option value={200}>Normal (200 WPM)</option>
                  <option value={280}>Fast (280 WPM)</option>
                </select>
              </div>
            )}
          </div>

          <motion.div 
            className="story-text"
            style={{ fontSize: `${fontSize}px` }}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            <ReactMarkdown
              components={{
                h1: ({children}) => <h1 className="story-heading-1">{children}</h1>,
                h2: ({children}) => <h2 className="story-heading-2">{children}</h2>,
                h3: ({children}) => <h3 className="story-heading-3">{children}</h3>,
                p: ({children}) => <p className="story-paragraph">{children}</p>,
                em: ({children}) => <em className="story-emphasis">{children}</em>,
                strong: ({children}) => <strong className="story-strong">{children}</strong>,
              }}
            >
              {content}
            </ReactMarkdown>
          </motion.div>

          {/* Story Footer */}
          <div className="story-footer">
            <div className="story-theme">
              <Heart size={14} />
              <span>Theme: {theme.replace(/_/g, ' ')}</span>
            </div>
            <div className="story-signature">
              Crafted with care by HavenMind AI
            </div>
          </div>
        </div>
      </motion.div>
    </AnimatePresence>
  );
};

export default StoryDisplay;